// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cfg-x-msg-channel-status.proto

#ifndef PROTOBUF_cfg_2dx_2dmsg_2dchannel_2dstatus_2eproto__INCLUDED
#define PROTOBUF_cfg_2dx_2dmsg_2dchannel_2dstatus_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_cfg_2dx_2dmsg_2dchannel_2dstatus_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[9];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsXmsgChannelStatusCfgPb_KafkaProdEntry_DoNotUseImpl();
void InitDefaultsXmsgChannelStatusCfgPb_KafkaProdEntry_DoNotUse();
void InitDefaultsXmsgChannelStatusCfgPbImpl();
void InitDefaultsXmsgChannelStatusCfgPb();
void InitDefaultsXmsgChannelStatusCfgMongodbImpl();
void InitDefaultsXmsgChannelStatusCfgMongodb();
void InitDefaultsXmsgChannelStatusCfgMysqlImpl();
void InitDefaultsXmsgChannelStatusCfgMysql();
void InitDefaultsXmsgChannelStatusCfgLogImpl();
void InitDefaultsXmsgChannelStatusCfgLog();
void InitDefaultsXmsgChannelStatusCfgXscTcpServerImpl();
void InitDefaultsXmsgChannelStatusCfgXscTcpServer();
void InitDefaultsXmsgChannelStatusCfgXmsgNeH2nAddrImpl();
void InitDefaultsXmsgChannelStatusCfgXmsgNeH2nAddr();
void InitDefaultsXmsgChannelStatusCfgXmsgNeN2hAddrImpl();
void InitDefaultsXmsgChannelStatusCfgXmsgNeN2hAddr();
void InitDefaultsXmsgChannelStatusCfgMiscImpl();
void InitDefaultsXmsgChannelStatusCfgMisc();
inline void InitDefaults() {
  InitDefaultsXmsgChannelStatusCfgPb_KafkaProdEntry_DoNotUse();
  InitDefaultsXmsgChannelStatusCfgPb();
  InitDefaultsXmsgChannelStatusCfgMongodb();
  InitDefaultsXmsgChannelStatusCfgMysql();
  InitDefaultsXmsgChannelStatusCfgLog();
  InitDefaultsXmsgChannelStatusCfgXscTcpServer();
  InitDefaultsXmsgChannelStatusCfgXmsgNeH2nAddr();
  InitDefaultsXmsgChannelStatusCfgXmsgNeN2hAddr();
  InitDefaultsXmsgChannelStatusCfgMisc();
}
}  // namespace protobuf_cfg_2dx_2dmsg_2dchannel_2dstatus_2eproto
class XmsgChannelStatusCfgLog;
class XmsgChannelStatusCfgLogDefaultTypeInternal;
extern XmsgChannelStatusCfgLogDefaultTypeInternal _XmsgChannelStatusCfgLog_default_instance_;
class XmsgChannelStatusCfgMisc;
class XmsgChannelStatusCfgMiscDefaultTypeInternal;
extern XmsgChannelStatusCfgMiscDefaultTypeInternal _XmsgChannelStatusCfgMisc_default_instance_;
class XmsgChannelStatusCfgMongodb;
class XmsgChannelStatusCfgMongodbDefaultTypeInternal;
extern XmsgChannelStatusCfgMongodbDefaultTypeInternal _XmsgChannelStatusCfgMongodb_default_instance_;
class XmsgChannelStatusCfgMysql;
class XmsgChannelStatusCfgMysqlDefaultTypeInternal;
extern XmsgChannelStatusCfgMysqlDefaultTypeInternal _XmsgChannelStatusCfgMysql_default_instance_;
class XmsgChannelStatusCfgPb;
class XmsgChannelStatusCfgPbDefaultTypeInternal;
extern XmsgChannelStatusCfgPbDefaultTypeInternal _XmsgChannelStatusCfgPb_default_instance_;
class XmsgChannelStatusCfgPb_KafkaProdEntry_DoNotUse;
class XmsgChannelStatusCfgPb_KafkaProdEntry_DoNotUseDefaultTypeInternal;
extern XmsgChannelStatusCfgPb_KafkaProdEntry_DoNotUseDefaultTypeInternal _XmsgChannelStatusCfgPb_KafkaProdEntry_DoNotUse_default_instance_;
class XmsgChannelStatusCfgXmsgNeH2nAddr;
class XmsgChannelStatusCfgXmsgNeH2nAddrDefaultTypeInternal;
extern XmsgChannelStatusCfgXmsgNeH2nAddrDefaultTypeInternal _XmsgChannelStatusCfgXmsgNeH2nAddr_default_instance_;
class XmsgChannelStatusCfgXmsgNeN2hAddr;
class XmsgChannelStatusCfgXmsgNeN2hAddrDefaultTypeInternal;
extern XmsgChannelStatusCfgXmsgNeN2hAddrDefaultTypeInternal _XmsgChannelStatusCfgXmsgNeN2hAddr_default_instance_;
class XmsgChannelStatusCfgXscTcpServer;
class XmsgChannelStatusCfgXscTcpServerDefaultTypeInternal;
extern XmsgChannelStatusCfgXscTcpServerDefaultTypeInternal _XmsgChannelStatusCfgXscTcpServer_default_instance_;

// ===================================================================

class XmsgChannelStatusCfgPb_KafkaProdEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<XmsgChannelStatusCfgPb_KafkaProdEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<XmsgChannelStatusCfgPb_KafkaProdEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  XmsgChannelStatusCfgPb_KafkaProdEntry_DoNotUse();
  XmsgChannelStatusCfgPb_KafkaProdEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const XmsgChannelStatusCfgPb_KafkaProdEntry_DoNotUse& other);
  static const XmsgChannelStatusCfgPb_KafkaProdEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const XmsgChannelStatusCfgPb_KafkaProdEntry_DoNotUse*>(&_XmsgChannelStatusCfgPb_KafkaProdEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class XmsgChannelStatusCfgPb : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgChannelStatusCfgPb) */ {
 public:
  XmsgChannelStatusCfgPb();
  virtual ~XmsgChannelStatusCfgPb();

  XmsgChannelStatusCfgPb(const XmsgChannelStatusCfgPb& from);

  inline XmsgChannelStatusCfgPb& operator=(const XmsgChannelStatusCfgPb& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgChannelStatusCfgPb(XmsgChannelStatusCfgPb&& from) noexcept
    : XmsgChannelStatusCfgPb() {
    *this = ::std::move(from);
  }

  inline XmsgChannelStatusCfgPb& operator=(XmsgChannelStatusCfgPb&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgChannelStatusCfgPb& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgChannelStatusCfgPb* internal_default_instance() {
    return reinterpret_cast<const XmsgChannelStatusCfgPb*>(
               &_XmsgChannelStatusCfgPb_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(XmsgChannelStatusCfgPb* other);
  friend void swap(XmsgChannelStatusCfgPb& a, XmsgChannelStatusCfgPb& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgChannelStatusCfgPb* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgChannelStatusCfgPb* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgChannelStatusCfgPb& from);
  void MergeFrom(const XmsgChannelStatusCfgPb& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgChannelStatusCfgPb* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated .XmsgChannelStatusCfgXmsgNeH2nAddr h2n = 7;
  int h2n_size() const;
  void clear_h2n();
  static const int kH2NFieldNumber = 7;
  const ::XmsgChannelStatusCfgXmsgNeH2nAddr& h2n(int index) const;
  ::XmsgChannelStatusCfgXmsgNeH2nAddr* mutable_h2n(int index);
  ::XmsgChannelStatusCfgXmsgNeH2nAddr* add_h2n();
  ::google::protobuf::RepeatedPtrField< ::XmsgChannelStatusCfgXmsgNeH2nAddr >*
      mutable_h2n();
  const ::google::protobuf::RepeatedPtrField< ::XmsgChannelStatusCfgXmsgNeH2nAddr >&
      h2n() const;

  // repeated .XmsgChannelStatusCfgXmsgNeN2hAddr n2h = 8;
  int n2h_size() const;
  void clear_n2h();
  static const int kN2HFieldNumber = 8;
  const ::XmsgChannelStatusCfgXmsgNeN2hAddr& n2h(int index) const;
  ::XmsgChannelStatusCfgXmsgNeN2hAddr* mutable_n2h(int index);
  ::XmsgChannelStatusCfgXmsgNeN2hAddr* add_n2h();
  ::google::protobuf::RepeatedPtrField< ::XmsgChannelStatusCfgXmsgNeN2hAddr >*
      mutable_n2h();
  const ::google::protobuf::RepeatedPtrField< ::XmsgChannelStatusCfgXmsgNeN2hAddr >&
      n2h() const;

  // map<string, string> kafkaProd = 12;
  int kafkaprod_size() const;
  void clear_kafkaprod();
  static const int kKafkaProdFieldNumber = 12;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      kafkaprod() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_kafkaprod();

  // string cgt = 1;
  void clear_cgt();
  static const int kCgtFieldNumber = 1;
  const ::std::string& cgt() const;
  void set_cgt(const ::std::string& value);
  #if LANG_CXX11
  void set_cgt(::std::string&& value);
  #endif
  void set_cgt(const char* value);
  void set_cgt(const char* value, size_t size);
  ::std::string* mutable_cgt();
  ::std::string* release_cgt();
  void set_allocated_cgt(::std::string* cgt);

  // string cfgType = 2;
  void clear_cfgtype();
  static const int kCfgTypeFieldNumber = 2;
  const ::std::string& cfgtype() const;
  void set_cfgtype(const ::std::string& value);
  #if LANG_CXX11
  void set_cfgtype(::std::string&& value);
  #endif
  void set_cfgtype(const char* value);
  void set_cfgtype(const char* value, size_t size);
  ::std::string* mutable_cfgtype();
  ::std::string* release_cfgtype();
  void set_allocated_cfgtype(::std::string* cfgtype);

  // .XmsgChannelStatusCfgMongodb mongodb = 3;
  bool has_mongodb() const;
  void clear_mongodb();
  static const int kMongodbFieldNumber = 3;
  const ::XmsgChannelStatusCfgMongodb& mongodb() const;
  ::XmsgChannelStatusCfgMongodb* release_mongodb();
  ::XmsgChannelStatusCfgMongodb* mutable_mongodb();
  void set_allocated_mongodb(::XmsgChannelStatusCfgMongodb* mongodb);

  // .XmsgChannelStatusCfgMysql mysql = 4;
  bool has_mysql() const;
  void clear_mysql();
  static const int kMysqlFieldNumber = 4;
  const ::XmsgChannelStatusCfgMysql& mysql() const;
  ::XmsgChannelStatusCfgMysql* release_mysql();
  ::XmsgChannelStatusCfgMysql* mutable_mysql();
  void set_allocated_mysql(::XmsgChannelStatusCfgMysql* mysql);

  // .XmsgChannelStatusCfgLog log = 5;
  bool has_log() const;
  void clear_log();
  static const int kLogFieldNumber = 5;
  const ::XmsgChannelStatusCfgLog& log() const;
  ::XmsgChannelStatusCfgLog* release_log();
  ::XmsgChannelStatusCfgLog* mutable_log();
  void set_allocated_log(::XmsgChannelStatusCfgLog* log);

  // .XmsgChannelStatusCfgXscTcpServer xscTcpCfg = 6;
  bool has_xsctcpcfg() const;
  void clear_xsctcpcfg();
  static const int kXscTcpCfgFieldNumber = 6;
  const ::XmsgChannelStatusCfgXscTcpServer& xsctcpcfg() const;
  ::XmsgChannelStatusCfgXscTcpServer* release_xsctcpcfg();
  ::XmsgChannelStatusCfgXscTcpServer* mutable_xsctcpcfg();
  void set_allocated_xsctcpcfg(::XmsgChannelStatusCfgXscTcpServer* xsctcpcfg);

  // .XmsgChannelStatusCfgMisc misc = 9;
  bool has_misc() const;
  void clear_misc();
  static const int kMiscFieldNumber = 9;
  const ::XmsgChannelStatusCfgMisc& misc() const;
  ::XmsgChannelStatusCfgMisc* release_misc();
  ::XmsgChannelStatusCfgMisc* mutable_misc();
  void set_allocated_misc(::XmsgChannelStatusCfgMisc* misc);

  // uint64 gts = 10;
  void clear_gts();
  static const int kGtsFieldNumber = 10;
  ::google::protobuf::uint64 gts() const;
  void set_gts(::google::protobuf::uint64 value);

  // uint64 uts = 11;
  void clear_uts();
  static const int kUtsFieldNumber = 11;
  ::google::protobuf::uint64 uts() const;
  void set_uts(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:XmsgChannelStatusCfgPb)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::XmsgChannelStatusCfgXmsgNeH2nAddr > h2n_;
  ::google::protobuf::RepeatedPtrField< ::XmsgChannelStatusCfgXmsgNeN2hAddr > n2h_;
  ::google::protobuf::internal::MapField<
      XmsgChannelStatusCfgPb_KafkaProdEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > kafkaprod_;
  ::google::protobuf::internal::ArenaStringPtr cgt_;
  ::google::protobuf::internal::ArenaStringPtr cfgtype_;
  ::XmsgChannelStatusCfgMongodb* mongodb_;
  ::XmsgChannelStatusCfgMysql* mysql_;
  ::XmsgChannelStatusCfgLog* log_;
  ::XmsgChannelStatusCfgXscTcpServer* xsctcpcfg_;
  ::XmsgChannelStatusCfgMisc* misc_;
  ::google::protobuf::uint64 gts_;
  ::google::protobuf::uint64 uts_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2dchannel_2dstatus_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2dchannel_2dstatus_2eproto::InitDefaultsXmsgChannelStatusCfgPbImpl();
};
// -------------------------------------------------------------------

class XmsgChannelStatusCfgMongodb : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgChannelStatusCfgMongodb) */ {
 public:
  XmsgChannelStatusCfgMongodb();
  virtual ~XmsgChannelStatusCfgMongodb();

  XmsgChannelStatusCfgMongodb(const XmsgChannelStatusCfgMongodb& from);

  inline XmsgChannelStatusCfgMongodb& operator=(const XmsgChannelStatusCfgMongodb& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgChannelStatusCfgMongodb(XmsgChannelStatusCfgMongodb&& from) noexcept
    : XmsgChannelStatusCfgMongodb() {
    *this = ::std::move(from);
  }

  inline XmsgChannelStatusCfgMongodb& operator=(XmsgChannelStatusCfgMongodb&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgChannelStatusCfgMongodb& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgChannelStatusCfgMongodb* internal_default_instance() {
    return reinterpret_cast<const XmsgChannelStatusCfgMongodb*>(
               &_XmsgChannelStatusCfgMongodb_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(XmsgChannelStatusCfgMongodb* other);
  friend void swap(XmsgChannelStatusCfgMongodb& a, XmsgChannelStatusCfgMongodb& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgChannelStatusCfgMongodb* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgChannelStatusCfgMongodb* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgChannelStatusCfgMongodb& from);
  void MergeFrom(const XmsgChannelStatusCfgMongodb& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgChannelStatusCfgMongodb* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string uri = 1;
  void clear_uri();
  static const int kUriFieldNumber = 1;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_uri(::std::string&& value);
  #endif
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  // @@protoc_insertion_point(class_scope:XmsgChannelStatusCfgMongodb)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2dchannel_2dstatus_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2dchannel_2dstatus_2eproto::InitDefaultsXmsgChannelStatusCfgMongodbImpl();
};
// -------------------------------------------------------------------

class XmsgChannelStatusCfgMysql : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgChannelStatusCfgMysql) */ {
 public:
  XmsgChannelStatusCfgMysql();
  virtual ~XmsgChannelStatusCfgMysql();

  XmsgChannelStatusCfgMysql(const XmsgChannelStatusCfgMysql& from);

  inline XmsgChannelStatusCfgMysql& operator=(const XmsgChannelStatusCfgMysql& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgChannelStatusCfgMysql(XmsgChannelStatusCfgMysql&& from) noexcept
    : XmsgChannelStatusCfgMysql() {
    *this = ::std::move(from);
  }

  inline XmsgChannelStatusCfgMysql& operator=(XmsgChannelStatusCfgMysql&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgChannelStatusCfgMysql& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgChannelStatusCfgMysql* internal_default_instance() {
    return reinterpret_cast<const XmsgChannelStatusCfgMysql*>(
               &_XmsgChannelStatusCfgMysql_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(XmsgChannelStatusCfgMysql* other);
  friend void swap(XmsgChannelStatusCfgMysql& a, XmsgChannelStatusCfgMysql& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgChannelStatusCfgMysql* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgChannelStatusCfgMysql* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgChannelStatusCfgMysql& from);
  void MergeFrom(const XmsgChannelStatusCfgMysql& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgChannelStatusCfgMysql* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string host = 1;
  void clear_host();
  static const int kHostFieldNumber = 1;
  const ::std::string& host() const;
  void set_host(const ::std::string& value);
  #if LANG_CXX11
  void set_host(::std::string&& value);
  #endif
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  ::std::string* mutable_host();
  ::std::string* release_host();
  void set_allocated_host(::std::string* host);

  // string db = 3;
  void clear_db();
  static const int kDbFieldNumber = 3;
  const ::std::string& db() const;
  void set_db(const ::std::string& value);
  #if LANG_CXX11
  void set_db(::std::string&& value);
  #endif
  void set_db(const char* value);
  void set_db(const char* value, size_t size);
  ::std::string* mutable_db();
  ::std::string* release_db();
  void set_allocated_db(::std::string* db);

  // string usr = 4;
  void clear_usr();
  static const int kUsrFieldNumber = 4;
  const ::std::string& usr() const;
  void set_usr(const ::std::string& value);
  #if LANG_CXX11
  void set_usr(::std::string&& value);
  #endif
  void set_usr(const char* value);
  void set_usr(const char* value, size_t size);
  ::std::string* mutable_usr();
  ::std::string* release_usr();
  void set_allocated_usr(::std::string* usr);

  // string password = 5;
  void clear_password();
  static const int kPasswordFieldNumber = 5;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // uint32 port = 2;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // uint32 poolSize = 6;
  void clear_poolsize();
  static const int kPoolSizeFieldNumber = 6;
  ::google::protobuf::uint32 poolsize() const;
  void set_poolsize(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:XmsgChannelStatusCfgMysql)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr host_;
  ::google::protobuf::internal::ArenaStringPtr db_;
  ::google::protobuf::internal::ArenaStringPtr usr_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::uint32 port_;
  ::google::protobuf::uint32 poolsize_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2dchannel_2dstatus_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2dchannel_2dstatus_2eproto::InitDefaultsXmsgChannelStatusCfgMysqlImpl();
};
// -------------------------------------------------------------------

class XmsgChannelStatusCfgLog : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgChannelStatusCfgLog) */ {
 public:
  XmsgChannelStatusCfgLog();
  virtual ~XmsgChannelStatusCfgLog();

  XmsgChannelStatusCfgLog(const XmsgChannelStatusCfgLog& from);

  inline XmsgChannelStatusCfgLog& operator=(const XmsgChannelStatusCfgLog& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgChannelStatusCfgLog(XmsgChannelStatusCfgLog&& from) noexcept
    : XmsgChannelStatusCfgLog() {
    *this = ::std::move(from);
  }

  inline XmsgChannelStatusCfgLog& operator=(XmsgChannelStatusCfgLog&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgChannelStatusCfgLog& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgChannelStatusCfgLog* internal_default_instance() {
    return reinterpret_cast<const XmsgChannelStatusCfgLog*>(
               &_XmsgChannelStatusCfgLog_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(XmsgChannelStatusCfgLog* other);
  friend void swap(XmsgChannelStatusCfgLog& a, XmsgChannelStatusCfgLog& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgChannelStatusCfgLog* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgChannelStatusCfgLog* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgChannelStatusCfgLog& from);
  void MergeFrom(const XmsgChannelStatusCfgLog& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgChannelStatusCfgLog* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string level = 1;
  void clear_level();
  static const int kLevelFieldNumber = 1;
  const ::std::string& level() const;
  void set_level(const ::std::string& value);
  #if LANG_CXX11
  void set_level(::std::string&& value);
  #endif
  void set_level(const char* value);
  void set_level(const char* value, size_t size);
  ::std::string* mutable_level();
  ::std::string* release_level();
  void set_allocated_level(::std::string* level);

  // string output = 2;
  void clear_output();
  static const int kOutputFieldNumber = 2;
  const ::std::string& output() const;
  void set_output(const ::std::string& value);
  #if LANG_CXX11
  void set_output(::std::string&& value);
  #endif
  void set_output(const char* value);
  void set_output(const char* value, size_t size);
  ::std::string* mutable_output();
  ::std::string* release_output();
  void set_allocated_output(::std::string* output);

  // @@protoc_insertion_point(class_scope:XmsgChannelStatusCfgLog)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr level_;
  ::google::protobuf::internal::ArenaStringPtr output_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2dchannel_2dstatus_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2dchannel_2dstatus_2eproto::InitDefaultsXmsgChannelStatusCfgLogImpl();
};
// -------------------------------------------------------------------

class XmsgChannelStatusCfgXscTcpServer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgChannelStatusCfgXscTcpServer) */ {
 public:
  XmsgChannelStatusCfgXscTcpServer();
  virtual ~XmsgChannelStatusCfgXscTcpServer();

  XmsgChannelStatusCfgXscTcpServer(const XmsgChannelStatusCfgXscTcpServer& from);

  inline XmsgChannelStatusCfgXscTcpServer& operator=(const XmsgChannelStatusCfgXscTcpServer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgChannelStatusCfgXscTcpServer(XmsgChannelStatusCfgXscTcpServer&& from) noexcept
    : XmsgChannelStatusCfgXscTcpServer() {
    *this = ::std::move(from);
  }

  inline XmsgChannelStatusCfgXscTcpServer& operator=(XmsgChannelStatusCfgXscTcpServer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgChannelStatusCfgXscTcpServer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgChannelStatusCfgXscTcpServer* internal_default_instance() {
    return reinterpret_cast<const XmsgChannelStatusCfgXscTcpServer*>(
               &_XmsgChannelStatusCfgXscTcpServer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(XmsgChannelStatusCfgXscTcpServer* other);
  friend void swap(XmsgChannelStatusCfgXscTcpServer& a, XmsgChannelStatusCfgXscTcpServer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgChannelStatusCfgXscTcpServer* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgChannelStatusCfgXscTcpServer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgChannelStatusCfgXscTcpServer& from);
  void MergeFrom(const XmsgChannelStatusCfgXscTcpServer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgChannelStatusCfgXscTcpServer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string addr = 1;
  void clear_addr();
  static const int kAddrFieldNumber = 1;
  const ::std::string& addr() const;
  void set_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_addr(::std::string&& value);
  #endif
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  ::std::string* mutable_addr();
  ::std::string* release_addr();
  void set_allocated_addr(::std::string* addr);

  // uint32 worker = 2;
  void clear_worker();
  static const int kWorkerFieldNumber = 2;
  ::google::protobuf::uint32 worker() const;
  void set_worker(::google::protobuf::uint32 value);

  // uint32 peerLimit = 3;
  void clear_peerlimit();
  static const int kPeerLimitFieldNumber = 3;
  ::google::protobuf::uint32 peerlimit() const;
  void set_peerlimit(::google::protobuf::uint32 value);

  // uint32 peerMtu = 4;
  void clear_peermtu();
  static const int kPeerMtuFieldNumber = 4;
  ::google::protobuf::uint32 peermtu() const;
  void set_peermtu(::google::protobuf::uint32 value);

  // uint32 peerRcvBuf = 5;
  void clear_peerrcvbuf();
  static const int kPeerRcvBufFieldNumber = 5;
  ::google::protobuf::uint32 peerrcvbuf() const;
  void set_peerrcvbuf(::google::protobuf::uint32 value);

  // uint32 peerSndBuf = 6;
  void clear_peersndbuf();
  static const int kPeerSndBufFieldNumber = 6;
  ::google::protobuf::uint32 peersndbuf() const;
  void set_peersndbuf(::google::protobuf::uint32 value);

  // uint32 lazyClose = 7;
  void clear_lazyclose();
  static const int kLazyCloseFieldNumber = 7;
  ::google::protobuf::uint32 lazyclose() const;
  void set_lazyclose(::google::protobuf::uint32 value);

  // uint32 heartbeat = 9;
  void clear_heartbeat();
  static const int kHeartbeatFieldNumber = 9;
  ::google::protobuf::uint32 heartbeat() const;
  void set_heartbeat(::google::protobuf::uint32 value);

  // uint32 n2hZombie = 10;
  void clear_n2hzombie();
  static const int kN2HZombieFieldNumber = 10;
  ::google::protobuf::uint32 n2hzombie() const;
  void set_n2hzombie(::google::protobuf::uint32 value);

  // bool tracing = 8;
  void clear_tracing();
  static const int kTracingFieldNumber = 8;
  bool tracing() const;
  void set_tracing(bool value);

  // bool n2hTracing = 12;
  void clear_n2htracing();
  static const int kN2HTracingFieldNumber = 12;
  bool n2htracing() const;
  void set_n2htracing(bool value);

  // uint32 n2hTransTimeout = 11;
  void clear_n2htranstimeout();
  static const int kN2HTransTimeoutFieldNumber = 11;
  ::google::protobuf::uint32 n2htranstimeout() const;
  void set_n2htranstimeout(::google::protobuf::uint32 value);

  // uint32 h2nReConn = 13;
  void clear_h2nreconn();
  static const int kH2NReConnFieldNumber = 13;
  ::google::protobuf::uint32 h2nreconn() const;
  void set_h2nreconn(::google::protobuf::uint32 value);

  // uint32 h2nTransTimeout = 14;
  void clear_h2ntranstimeout();
  static const int kH2NTransTimeoutFieldNumber = 14;
  ::google::protobuf::uint32 h2ntranstimeout() const;
  void set_h2ntranstimeout(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:XmsgChannelStatusCfgXscTcpServer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr addr_;
  ::google::protobuf::uint32 worker_;
  ::google::protobuf::uint32 peerlimit_;
  ::google::protobuf::uint32 peermtu_;
  ::google::protobuf::uint32 peerrcvbuf_;
  ::google::protobuf::uint32 peersndbuf_;
  ::google::protobuf::uint32 lazyclose_;
  ::google::protobuf::uint32 heartbeat_;
  ::google::protobuf::uint32 n2hzombie_;
  bool tracing_;
  bool n2htracing_;
  ::google::protobuf::uint32 n2htranstimeout_;
  ::google::protobuf::uint32 h2nreconn_;
  ::google::protobuf::uint32 h2ntranstimeout_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2dchannel_2dstatus_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2dchannel_2dstatus_2eproto::InitDefaultsXmsgChannelStatusCfgXscTcpServerImpl();
};
// -------------------------------------------------------------------

class XmsgChannelStatusCfgXmsgNeH2nAddr : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgChannelStatusCfgXmsgNeH2nAddr) */ {
 public:
  XmsgChannelStatusCfgXmsgNeH2nAddr();
  virtual ~XmsgChannelStatusCfgXmsgNeH2nAddr();

  XmsgChannelStatusCfgXmsgNeH2nAddr(const XmsgChannelStatusCfgXmsgNeH2nAddr& from);

  inline XmsgChannelStatusCfgXmsgNeH2nAddr& operator=(const XmsgChannelStatusCfgXmsgNeH2nAddr& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgChannelStatusCfgXmsgNeH2nAddr(XmsgChannelStatusCfgXmsgNeH2nAddr&& from) noexcept
    : XmsgChannelStatusCfgXmsgNeH2nAddr() {
    *this = ::std::move(from);
  }

  inline XmsgChannelStatusCfgXmsgNeH2nAddr& operator=(XmsgChannelStatusCfgXmsgNeH2nAddr&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgChannelStatusCfgXmsgNeH2nAddr& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgChannelStatusCfgXmsgNeH2nAddr* internal_default_instance() {
    return reinterpret_cast<const XmsgChannelStatusCfgXmsgNeH2nAddr*>(
               &_XmsgChannelStatusCfgXmsgNeH2nAddr_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(XmsgChannelStatusCfgXmsgNeH2nAddr* other);
  friend void swap(XmsgChannelStatusCfgXmsgNeH2nAddr& a, XmsgChannelStatusCfgXmsgNeH2nAddr& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgChannelStatusCfgXmsgNeH2nAddr* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgChannelStatusCfgXmsgNeH2nAddr* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgChannelStatusCfgXmsgNeH2nAddr& from);
  void MergeFrom(const XmsgChannelStatusCfgXmsgNeH2nAddr& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgChannelStatusCfgXmsgNeH2nAddr* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string neg = 1;
  void clear_neg();
  static const int kNegFieldNumber = 1;
  const ::std::string& neg() const;
  void set_neg(const ::std::string& value);
  #if LANG_CXX11
  void set_neg(::std::string&& value);
  #endif
  void set_neg(const char* value);
  void set_neg(const char* value, size_t size);
  ::std::string* mutable_neg();
  ::std::string* release_neg();
  void set_allocated_neg(::std::string* neg);

  // string addr = 2;
  void clear_addr();
  static const int kAddrFieldNumber = 2;
  const ::std::string& addr() const;
  void set_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_addr(::std::string&& value);
  #endif
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  ::std::string* mutable_addr();
  ::std::string* release_addr();
  void set_allocated_addr(::std::string* addr);

  // string pwd = 3;
  void clear_pwd();
  static const int kPwdFieldNumber = 3;
  const ::std::string& pwd() const;
  void set_pwd(const ::std::string& value);
  #if LANG_CXX11
  void set_pwd(::std::string&& value);
  #endif
  void set_pwd(const char* value);
  void set_pwd(const char* value, size_t size);
  ::std::string* mutable_pwd();
  ::std::string* release_pwd();
  void set_allocated_pwd(::std::string* pwd);

  // string alg = 4;
  void clear_alg();
  static const int kAlgFieldNumber = 4;
  const ::std::string& alg() const;
  void set_alg(const ::std::string& value);
  #if LANG_CXX11
  void set_alg(::std::string&& value);
  #endif
  void set_alg(const char* value);
  void set_alg(const char* value, size_t size);
  ::std::string* mutable_alg();
  ::std::string* release_alg();
  void set_allocated_alg(::std::string* alg);

  // uint32 redundant = 5;
  void clear_redundant();
  static const int kRedundantFieldNumber = 5;
  ::google::protobuf::uint32 redundant() const;
  void set_redundant(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:XmsgChannelStatusCfgXmsgNeH2nAddr)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr neg_;
  ::google::protobuf::internal::ArenaStringPtr addr_;
  ::google::protobuf::internal::ArenaStringPtr pwd_;
  ::google::protobuf::internal::ArenaStringPtr alg_;
  ::google::protobuf::uint32 redundant_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2dchannel_2dstatus_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2dchannel_2dstatus_2eproto::InitDefaultsXmsgChannelStatusCfgXmsgNeH2nAddrImpl();
};
// -------------------------------------------------------------------

class XmsgChannelStatusCfgXmsgNeN2hAddr : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgChannelStatusCfgXmsgNeN2hAddr) */ {
 public:
  XmsgChannelStatusCfgXmsgNeN2hAddr();
  virtual ~XmsgChannelStatusCfgXmsgNeN2hAddr();

  XmsgChannelStatusCfgXmsgNeN2hAddr(const XmsgChannelStatusCfgXmsgNeN2hAddr& from);

  inline XmsgChannelStatusCfgXmsgNeN2hAddr& operator=(const XmsgChannelStatusCfgXmsgNeN2hAddr& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgChannelStatusCfgXmsgNeN2hAddr(XmsgChannelStatusCfgXmsgNeN2hAddr&& from) noexcept
    : XmsgChannelStatusCfgXmsgNeN2hAddr() {
    *this = ::std::move(from);
  }

  inline XmsgChannelStatusCfgXmsgNeN2hAddr& operator=(XmsgChannelStatusCfgXmsgNeN2hAddr&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgChannelStatusCfgXmsgNeN2hAddr& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgChannelStatusCfgXmsgNeN2hAddr* internal_default_instance() {
    return reinterpret_cast<const XmsgChannelStatusCfgXmsgNeN2hAddr*>(
               &_XmsgChannelStatusCfgXmsgNeN2hAddr_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(XmsgChannelStatusCfgXmsgNeN2hAddr* other);
  friend void swap(XmsgChannelStatusCfgXmsgNeN2hAddr& a, XmsgChannelStatusCfgXmsgNeN2hAddr& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgChannelStatusCfgXmsgNeN2hAddr* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgChannelStatusCfgXmsgNeN2hAddr* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgChannelStatusCfgXmsgNeN2hAddr& from);
  void MergeFrom(const XmsgChannelStatusCfgXmsgNeN2hAddr& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgChannelStatusCfgXmsgNeN2hAddr* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string neg = 1;
  void clear_neg();
  static const int kNegFieldNumber = 1;
  const ::std::string& neg() const;
  void set_neg(const ::std::string& value);
  #if LANG_CXX11
  void set_neg(::std::string&& value);
  #endif
  void set_neg(const char* value);
  void set_neg(const char* value, size_t size);
  ::std::string* mutable_neg();
  ::std::string* release_neg();
  void set_allocated_neg(::std::string* neg);

  // string cgt = 2;
  void clear_cgt();
  static const int kCgtFieldNumber = 2;
  const ::std::string& cgt() const;
  void set_cgt(const ::std::string& value);
  #if LANG_CXX11
  void set_cgt(::std::string&& value);
  #endif
  void set_cgt(const char* value);
  void set_cgt(const char* value, size_t size);
  ::std::string* mutable_cgt();
  ::std::string* release_cgt();
  void set_allocated_cgt(::std::string* cgt);

  // string pwd = 3;
  void clear_pwd();
  static const int kPwdFieldNumber = 3;
  const ::std::string& pwd() const;
  void set_pwd(const ::std::string& value);
  #if LANG_CXX11
  void set_pwd(::std::string&& value);
  #endif
  void set_pwd(const char* value);
  void set_pwd(const char* value, size_t size);
  ::std::string* mutable_pwd();
  ::std::string* release_pwd();
  void set_allocated_pwd(::std::string* pwd);

  // string addr = 4;
  void clear_addr();
  static const int kAddrFieldNumber = 4;
  const ::std::string& addr() const;
  void set_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_addr(::std::string&& value);
  #endif
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  ::std::string* mutable_addr();
  ::std::string* release_addr();
  void set_allocated_addr(::std::string* addr);

  // @@protoc_insertion_point(class_scope:XmsgChannelStatusCfgXmsgNeN2hAddr)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr neg_;
  ::google::protobuf::internal::ArenaStringPtr cgt_;
  ::google::protobuf::internal::ArenaStringPtr pwd_;
  ::google::protobuf::internal::ArenaStringPtr addr_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2dchannel_2dstatus_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2dchannel_2dstatus_2eproto::InitDefaultsXmsgChannelStatusCfgXmsgNeN2hAddrImpl();
};
// -------------------------------------------------------------------

class XmsgChannelStatusCfgMisc : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgChannelStatusCfgMisc) */ {
 public:
  XmsgChannelStatusCfgMisc();
  virtual ~XmsgChannelStatusCfgMisc();

  XmsgChannelStatusCfgMisc(const XmsgChannelStatusCfgMisc& from);

  inline XmsgChannelStatusCfgMisc& operator=(const XmsgChannelStatusCfgMisc& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgChannelStatusCfgMisc(XmsgChannelStatusCfgMisc&& from) noexcept
    : XmsgChannelStatusCfgMisc() {
    *this = ::std::move(from);
  }

  inline XmsgChannelStatusCfgMisc& operator=(XmsgChannelStatusCfgMisc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgChannelStatusCfgMisc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgChannelStatusCfgMisc* internal_default_instance() {
    return reinterpret_cast<const XmsgChannelStatusCfgMisc*>(
               &_XmsgChannelStatusCfgMisc_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(XmsgChannelStatusCfgMisc* other);
  friend void swap(XmsgChannelStatusCfgMisc& a, XmsgChannelStatusCfgMisc& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgChannelStatusCfgMisc* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgChannelStatusCfgMisc* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgChannelStatusCfgMisc& from);
  void MergeFrom(const XmsgChannelStatusCfgMisc& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgChannelStatusCfgMisc* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string uhlr = 1;
  void clear_uhlr();
  static const int kUhlrFieldNumber = 1;
  const ::std::string& uhlr() const;
  void set_uhlr(const ::std::string& value);
  #if LANG_CXX11
  void set_uhlr(::std::string&& value);
  #endif
  void set_uhlr(const char* value);
  void set_uhlr(const char* value, size_t size);
  ::std::string* mutable_uhlr();
  ::std::string* release_uhlr();
  void set_allocated_uhlr(::std::string* uhlr);

  // string ghlr = 2;
  void clear_ghlr();
  static const int kGhlrFieldNumber = 2;
  const ::std::string& ghlr() const;
  void set_ghlr(const ::std::string& value);
  #if LANG_CXX11
  void set_ghlr(::std::string&& value);
  #endif
  void set_ghlr(const char* value);
  void set_ghlr(const char* value, size_t size);
  ::std::string* mutable_ghlr();
  ::std::string* release_ghlr();
  void set_allocated_ghlr(::std::string* ghlr);

  // @@protoc_insertion_point(class_scope:XmsgChannelStatusCfgMisc)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr uhlr_;
  ::google::protobuf::internal::ArenaStringPtr ghlr_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2dchannel_2dstatus_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2dchannel_2dstatus_2eproto::InitDefaultsXmsgChannelStatusCfgMiscImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// XmsgChannelStatusCfgPb

// string cgt = 1;
inline void XmsgChannelStatusCfgPb::clear_cgt() {
  cgt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgChannelStatusCfgPb::cgt() const {
  // @@protoc_insertion_point(field_get:XmsgChannelStatusCfgPb.cgt)
  return cgt_.GetNoArena();
}
inline void XmsgChannelStatusCfgPb::set_cgt(const ::std::string& value) {
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgChannelStatusCfgPb.cgt)
}
#if LANG_CXX11
inline void XmsgChannelStatusCfgPb::set_cgt(::std::string&& value) {
  
  cgt_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgChannelStatusCfgPb.cgt)
}
#endif
inline void XmsgChannelStatusCfgPb::set_cgt(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgChannelStatusCfgPb.cgt)
}
inline void XmsgChannelStatusCfgPb::set_cgt(const char* value, size_t size) {
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgChannelStatusCfgPb.cgt)
}
inline ::std::string* XmsgChannelStatusCfgPb::mutable_cgt() {
  
  // @@protoc_insertion_point(field_mutable:XmsgChannelStatusCfgPb.cgt)
  return cgt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgChannelStatusCfgPb::release_cgt() {
  // @@protoc_insertion_point(field_release:XmsgChannelStatusCfgPb.cgt)
  
  return cgt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgChannelStatusCfgPb::set_allocated_cgt(::std::string* cgt) {
  if (cgt != NULL) {
    
  } else {
    
  }
  cgt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cgt);
  // @@protoc_insertion_point(field_set_allocated:XmsgChannelStatusCfgPb.cgt)
}

// string cfgType = 2;
inline void XmsgChannelStatusCfgPb::clear_cfgtype() {
  cfgtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgChannelStatusCfgPb::cfgtype() const {
  // @@protoc_insertion_point(field_get:XmsgChannelStatusCfgPb.cfgType)
  return cfgtype_.GetNoArena();
}
inline void XmsgChannelStatusCfgPb::set_cfgtype(const ::std::string& value) {
  
  cfgtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgChannelStatusCfgPb.cfgType)
}
#if LANG_CXX11
inline void XmsgChannelStatusCfgPb::set_cfgtype(::std::string&& value) {
  
  cfgtype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgChannelStatusCfgPb.cfgType)
}
#endif
inline void XmsgChannelStatusCfgPb::set_cfgtype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cfgtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgChannelStatusCfgPb.cfgType)
}
inline void XmsgChannelStatusCfgPb::set_cfgtype(const char* value, size_t size) {
  
  cfgtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgChannelStatusCfgPb.cfgType)
}
inline ::std::string* XmsgChannelStatusCfgPb::mutable_cfgtype() {
  
  // @@protoc_insertion_point(field_mutable:XmsgChannelStatusCfgPb.cfgType)
  return cfgtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgChannelStatusCfgPb::release_cfgtype() {
  // @@protoc_insertion_point(field_release:XmsgChannelStatusCfgPb.cfgType)
  
  return cfgtype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgChannelStatusCfgPb::set_allocated_cfgtype(::std::string* cfgtype) {
  if (cfgtype != NULL) {
    
  } else {
    
  }
  cfgtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cfgtype);
  // @@protoc_insertion_point(field_set_allocated:XmsgChannelStatusCfgPb.cfgType)
}

// .XmsgChannelStatusCfgMongodb mongodb = 3;
inline bool XmsgChannelStatusCfgPb::has_mongodb() const {
  return this != internal_default_instance() && mongodb_ != NULL;
}
inline void XmsgChannelStatusCfgPb::clear_mongodb() {
  if (GetArenaNoVirtual() == NULL && mongodb_ != NULL) {
    delete mongodb_;
  }
  mongodb_ = NULL;
}
inline const ::XmsgChannelStatusCfgMongodb& XmsgChannelStatusCfgPb::mongodb() const {
  const ::XmsgChannelStatusCfgMongodb* p = mongodb_;
  // @@protoc_insertion_point(field_get:XmsgChannelStatusCfgPb.mongodb)
  return p != NULL ? *p : *reinterpret_cast<const ::XmsgChannelStatusCfgMongodb*>(
      &::_XmsgChannelStatusCfgMongodb_default_instance_);
}
inline ::XmsgChannelStatusCfgMongodb* XmsgChannelStatusCfgPb::release_mongodb() {
  // @@protoc_insertion_point(field_release:XmsgChannelStatusCfgPb.mongodb)
  
  ::XmsgChannelStatusCfgMongodb* temp = mongodb_;
  mongodb_ = NULL;
  return temp;
}
inline ::XmsgChannelStatusCfgMongodb* XmsgChannelStatusCfgPb::mutable_mongodb() {
  
  if (mongodb_ == NULL) {
    mongodb_ = new ::XmsgChannelStatusCfgMongodb;
  }
  // @@protoc_insertion_point(field_mutable:XmsgChannelStatusCfgPb.mongodb)
  return mongodb_;
}
inline void XmsgChannelStatusCfgPb::set_allocated_mongodb(::XmsgChannelStatusCfgMongodb* mongodb) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete mongodb_;
  }
  if (mongodb) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mongodb = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mongodb, submessage_arena);
    }
    
  } else {
    
  }
  mongodb_ = mongodb;
  // @@protoc_insertion_point(field_set_allocated:XmsgChannelStatusCfgPb.mongodb)
}

// .XmsgChannelStatusCfgMysql mysql = 4;
inline bool XmsgChannelStatusCfgPb::has_mysql() const {
  return this != internal_default_instance() && mysql_ != NULL;
}
inline void XmsgChannelStatusCfgPb::clear_mysql() {
  if (GetArenaNoVirtual() == NULL && mysql_ != NULL) {
    delete mysql_;
  }
  mysql_ = NULL;
}
inline const ::XmsgChannelStatusCfgMysql& XmsgChannelStatusCfgPb::mysql() const {
  const ::XmsgChannelStatusCfgMysql* p = mysql_;
  // @@protoc_insertion_point(field_get:XmsgChannelStatusCfgPb.mysql)
  return p != NULL ? *p : *reinterpret_cast<const ::XmsgChannelStatusCfgMysql*>(
      &::_XmsgChannelStatusCfgMysql_default_instance_);
}
inline ::XmsgChannelStatusCfgMysql* XmsgChannelStatusCfgPb::release_mysql() {
  // @@protoc_insertion_point(field_release:XmsgChannelStatusCfgPb.mysql)
  
  ::XmsgChannelStatusCfgMysql* temp = mysql_;
  mysql_ = NULL;
  return temp;
}
inline ::XmsgChannelStatusCfgMysql* XmsgChannelStatusCfgPb::mutable_mysql() {
  
  if (mysql_ == NULL) {
    mysql_ = new ::XmsgChannelStatusCfgMysql;
  }
  // @@protoc_insertion_point(field_mutable:XmsgChannelStatusCfgPb.mysql)
  return mysql_;
}
inline void XmsgChannelStatusCfgPb::set_allocated_mysql(::XmsgChannelStatusCfgMysql* mysql) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete mysql_;
  }
  if (mysql) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mysql = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mysql, submessage_arena);
    }
    
  } else {
    
  }
  mysql_ = mysql;
  // @@protoc_insertion_point(field_set_allocated:XmsgChannelStatusCfgPb.mysql)
}

// .XmsgChannelStatusCfgLog log = 5;
inline bool XmsgChannelStatusCfgPb::has_log() const {
  return this != internal_default_instance() && log_ != NULL;
}
inline void XmsgChannelStatusCfgPb::clear_log() {
  if (GetArenaNoVirtual() == NULL && log_ != NULL) {
    delete log_;
  }
  log_ = NULL;
}
inline const ::XmsgChannelStatusCfgLog& XmsgChannelStatusCfgPb::log() const {
  const ::XmsgChannelStatusCfgLog* p = log_;
  // @@protoc_insertion_point(field_get:XmsgChannelStatusCfgPb.log)
  return p != NULL ? *p : *reinterpret_cast<const ::XmsgChannelStatusCfgLog*>(
      &::_XmsgChannelStatusCfgLog_default_instance_);
}
inline ::XmsgChannelStatusCfgLog* XmsgChannelStatusCfgPb::release_log() {
  // @@protoc_insertion_point(field_release:XmsgChannelStatusCfgPb.log)
  
  ::XmsgChannelStatusCfgLog* temp = log_;
  log_ = NULL;
  return temp;
}
inline ::XmsgChannelStatusCfgLog* XmsgChannelStatusCfgPb::mutable_log() {
  
  if (log_ == NULL) {
    log_ = new ::XmsgChannelStatusCfgLog;
  }
  // @@protoc_insertion_point(field_mutable:XmsgChannelStatusCfgPb.log)
  return log_;
}
inline void XmsgChannelStatusCfgPb::set_allocated_log(::XmsgChannelStatusCfgLog* log) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete log_;
  }
  if (log) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      log = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, log, submessage_arena);
    }
    
  } else {
    
  }
  log_ = log;
  // @@protoc_insertion_point(field_set_allocated:XmsgChannelStatusCfgPb.log)
}

// .XmsgChannelStatusCfgXscTcpServer xscTcpCfg = 6;
inline bool XmsgChannelStatusCfgPb::has_xsctcpcfg() const {
  return this != internal_default_instance() && xsctcpcfg_ != NULL;
}
inline void XmsgChannelStatusCfgPb::clear_xsctcpcfg() {
  if (GetArenaNoVirtual() == NULL && xsctcpcfg_ != NULL) {
    delete xsctcpcfg_;
  }
  xsctcpcfg_ = NULL;
}
inline const ::XmsgChannelStatusCfgXscTcpServer& XmsgChannelStatusCfgPb::xsctcpcfg() const {
  const ::XmsgChannelStatusCfgXscTcpServer* p = xsctcpcfg_;
  // @@protoc_insertion_point(field_get:XmsgChannelStatusCfgPb.xscTcpCfg)
  return p != NULL ? *p : *reinterpret_cast<const ::XmsgChannelStatusCfgXscTcpServer*>(
      &::_XmsgChannelStatusCfgXscTcpServer_default_instance_);
}
inline ::XmsgChannelStatusCfgXscTcpServer* XmsgChannelStatusCfgPb::release_xsctcpcfg() {
  // @@protoc_insertion_point(field_release:XmsgChannelStatusCfgPb.xscTcpCfg)
  
  ::XmsgChannelStatusCfgXscTcpServer* temp = xsctcpcfg_;
  xsctcpcfg_ = NULL;
  return temp;
}
inline ::XmsgChannelStatusCfgXscTcpServer* XmsgChannelStatusCfgPb::mutable_xsctcpcfg() {
  
  if (xsctcpcfg_ == NULL) {
    xsctcpcfg_ = new ::XmsgChannelStatusCfgXscTcpServer;
  }
  // @@protoc_insertion_point(field_mutable:XmsgChannelStatusCfgPb.xscTcpCfg)
  return xsctcpcfg_;
}
inline void XmsgChannelStatusCfgPb::set_allocated_xsctcpcfg(::XmsgChannelStatusCfgXscTcpServer* xsctcpcfg) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete xsctcpcfg_;
  }
  if (xsctcpcfg) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      xsctcpcfg = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, xsctcpcfg, submessage_arena);
    }
    
  } else {
    
  }
  xsctcpcfg_ = xsctcpcfg;
  // @@protoc_insertion_point(field_set_allocated:XmsgChannelStatusCfgPb.xscTcpCfg)
}

// repeated .XmsgChannelStatusCfgXmsgNeH2nAddr h2n = 7;
inline int XmsgChannelStatusCfgPb::h2n_size() const {
  return h2n_.size();
}
inline void XmsgChannelStatusCfgPb::clear_h2n() {
  h2n_.Clear();
}
inline const ::XmsgChannelStatusCfgXmsgNeH2nAddr& XmsgChannelStatusCfgPb::h2n(int index) const {
  // @@protoc_insertion_point(field_get:XmsgChannelStatusCfgPb.h2n)
  return h2n_.Get(index);
}
inline ::XmsgChannelStatusCfgXmsgNeH2nAddr* XmsgChannelStatusCfgPb::mutable_h2n(int index) {
  // @@protoc_insertion_point(field_mutable:XmsgChannelStatusCfgPb.h2n)
  return h2n_.Mutable(index);
}
inline ::XmsgChannelStatusCfgXmsgNeH2nAddr* XmsgChannelStatusCfgPb::add_h2n() {
  // @@protoc_insertion_point(field_add:XmsgChannelStatusCfgPb.h2n)
  return h2n_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::XmsgChannelStatusCfgXmsgNeH2nAddr >*
XmsgChannelStatusCfgPb::mutable_h2n() {
  // @@protoc_insertion_point(field_mutable_list:XmsgChannelStatusCfgPb.h2n)
  return &h2n_;
}
inline const ::google::protobuf::RepeatedPtrField< ::XmsgChannelStatusCfgXmsgNeH2nAddr >&
XmsgChannelStatusCfgPb::h2n() const {
  // @@protoc_insertion_point(field_list:XmsgChannelStatusCfgPb.h2n)
  return h2n_;
}

// repeated .XmsgChannelStatusCfgXmsgNeN2hAddr n2h = 8;
inline int XmsgChannelStatusCfgPb::n2h_size() const {
  return n2h_.size();
}
inline void XmsgChannelStatusCfgPb::clear_n2h() {
  n2h_.Clear();
}
inline const ::XmsgChannelStatusCfgXmsgNeN2hAddr& XmsgChannelStatusCfgPb::n2h(int index) const {
  // @@protoc_insertion_point(field_get:XmsgChannelStatusCfgPb.n2h)
  return n2h_.Get(index);
}
inline ::XmsgChannelStatusCfgXmsgNeN2hAddr* XmsgChannelStatusCfgPb::mutable_n2h(int index) {
  // @@protoc_insertion_point(field_mutable:XmsgChannelStatusCfgPb.n2h)
  return n2h_.Mutable(index);
}
inline ::XmsgChannelStatusCfgXmsgNeN2hAddr* XmsgChannelStatusCfgPb::add_n2h() {
  // @@protoc_insertion_point(field_add:XmsgChannelStatusCfgPb.n2h)
  return n2h_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::XmsgChannelStatusCfgXmsgNeN2hAddr >*
XmsgChannelStatusCfgPb::mutable_n2h() {
  // @@protoc_insertion_point(field_mutable_list:XmsgChannelStatusCfgPb.n2h)
  return &n2h_;
}
inline const ::google::protobuf::RepeatedPtrField< ::XmsgChannelStatusCfgXmsgNeN2hAddr >&
XmsgChannelStatusCfgPb::n2h() const {
  // @@protoc_insertion_point(field_list:XmsgChannelStatusCfgPb.n2h)
  return n2h_;
}

// .XmsgChannelStatusCfgMisc misc = 9;
inline bool XmsgChannelStatusCfgPb::has_misc() const {
  return this != internal_default_instance() && misc_ != NULL;
}
inline void XmsgChannelStatusCfgPb::clear_misc() {
  if (GetArenaNoVirtual() == NULL && misc_ != NULL) {
    delete misc_;
  }
  misc_ = NULL;
}
inline const ::XmsgChannelStatusCfgMisc& XmsgChannelStatusCfgPb::misc() const {
  const ::XmsgChannelStatusCfgMisc* p = misc_;
  // @@protoc_insertion_point(field_get:XmsgChannelStatusCfgPb.misc)
  return p != NULL ? *p : *reinterpret_cast<const ::XmsgChannelStatusCfgMisc*>(
      &::_XmsgChannelStatusCfgMisc_default_instance_);
}
inline ::XmsgChannelStatusCfgMisc* XmsgChannelStatusCfgPb::release_misc() {
  // @@protoc_insertion_point(field_release:XmsgChannelStatusCfgPb.misc)
  
  ::XmsgChannelStatusCfgMisc* temp = misc_;
  misc_ = NULL;
  return temp;
}
inline ::XmsgChannelStatusCfgMisc* XmsgChannelStatusCfgPb::mutable_misc() {
  
  if (misc_ == NULL) {
    misc_ = new ::XmsgChannelStatusCfgMisc;
  }
  // @@protoc_insertion_point(field_mutable:XmsgChannelStatusCfgPb.misc)
  return misc_;
}
inline void XmsgChannelStatusCfgPb::set_allocated_misc(::XmsgChannelStatusCfgMisc* misc) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete misc_;
  }
  if (misc) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      misc = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, misc, submessage_arena);
    }
    
  } else {
    
  }
  misc_ = misc;
  // @@protoc_insertion_point(field_set_allocated:XmsgChannelStatusCfgPb.misc)
}

// map<string, string> kafkaProd = 12;
inline int XmsgChannelStatusCfgPb::kafkaprod_size() const {
  return kafkaprod_.size();
}
inline void XmsgChannelStatusCfgPb::clear_kafkaprod() {
  kafkaprod_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
XmsgChannelStatusCfgPb::kafkaprod() const {
  // @@protoc_insertion_point(field_map:XmsgChannelStatusCfgPb.kafkaProd)
  return kafkaprod_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
XmsgChannelStatusCfgPb::mutable_kafkaprod() {
  // @@protoc_insertion_point(field_mutable_map:XmsgChannelStatusCfgPb.kafkaProd)
  return kafkaprod_.MutableMap();
}

// uint64 gts = 10;
inline void XmsgChannelStatusCfgPb::clear_gts() {
  gts_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 XmsgChannelStatusCfgPb::gts() const {
  // @@protoc_insertion_point(field_get:XmsgChannelStatusCfgPb.gts)
  return gts_;
}
inline void XmsgChannelStatusCfgPb::set_gts(::google::protobuf::uint64 value) {
  
  gts_ = value;
  // @@protoc_insertion_point(field_set:XmsgChannelStatusCfgPb.gts)
}

// uint64 uts = 11;
inline void XmsgChannelStatusCfgPb::clear_uts() {
  uts_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 XmsgChannelStatusCfgPb::uts() const {
  // @@protoc_insertion_point(field_get:XmsgChannelStatusCfgPb.uts)
  return uts_;
}
inline void XmsgChannelStatusCfgPb::set_uts(::google::protobuf::uint64 value) {
  
  uts_ = value;
  // @@protoc_insertion_point(field_set:XmsgChannelStatusCfgPb.uts)
}

// -------------------------------------------------------------------

// XmsgChannelStatusCfgMongodb

// string uri = 1;
inline void XmsgChannelStatusCfgMongodb::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgChannelStatusCfgMongodb::uri() const {
  // @@protoc_insertion_point(field_get:XmsgChannelStatusCfgMongodb.uri)
  return uri_.GetNoArena();
}
inline void XmsgChannelStatusCfgMongodb::set_uri(const ::std::string& value) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgChannelStatusCfgMongodb.uri)
}
#if LANG_CXX11
inline void XmsgChannelStatusCfgMongodb::set_uri(::std::string&& value) {
  
  uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgChannelStatusCfgMongodb.uri)
}
#endif
inline void XmsgChannelStatusCfgMongodb::set_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgChannelStatusCfgMongodb.uri)
}
inline void XmsgChannelStatusCfgMongodb::set_uri(const char* value, size_t size) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgChannelStatusCfgMongodb.uri)
}
inline ::std::string* XmsgChannelStatusCfgMongodb::mutable_uri() {
  
  // @@protoc_insertion_point(field_mutable:XmsgChannelStatusCfgMongodb.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgChannelStatusCfgMongodb::release_uri() {
  // @@protoc_insertion_point(field_release:XmsgChannelStatusCfgMongodb.uri)
  
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgChannelStatusCfgMongodb::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    
  } else {
    
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:XmsgChannelStatusCfgMongodb.uri)
}

// -------------------------------------------------------------------

// XmsgChannelStatusCfgMysql

// string host = 1;
inline void XmsgChannelStatusCfgMysql::clear_host() {
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgChannelStatusCfgMysql::host() const {
  // @@protoc_insertion_point(field_get:XmsgChannelStatusCfgMysql.host)
  return host_.GetNoArena();
}
inline void XmsgChannelStatusCfgMysql::set_host(const ::std::string& value) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgChannelStatusCfgMysql.host)
}
#if LANG_CXX11
inline void XmsgChannelStatusCfgMysql::set_host(::std::string&& value) {
  
  host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgChannelStatusCfgMysql.host)
}
#endif
inline void XmsgChannelStatusCfgMysql::set_host(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgChannelStatusCfgMysql.host)
}
inline void XmsgChannelStatusCfgMysql::set_host(const char* value, size_t size) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgChannelStatusCfgMysql.host)
}
inline ::std::string* XmsgChannelStatusCfgMysql::mutable_host() {
  
  // @@protoc_insertion_point(field_mutable:XmsgChannelStatusCfgMysql.host)
  return host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgChannelStatusCfgMysql::release_host() {
  // @@protoc_insertion_point(field_release:XmsgChannelStatusCfgMysql.host)
  
  return host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgChannelStatusCfgMysql::set_allocated_host(::std::string* host) {
  if (host != NULL) {
    
  } else {
    
  }
  host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:XmsgChannelStatusCfgMysql.host)
}

// uint32 port = 2;
inline void XmsgChannelStatusCfgMysql::clear_port() {
  port_ = 0u;
}
inline ::google::protobuf::uint32 XmsgChannelStatusCfgMysql::port() const {
  // @@protoc_insertion_point(field_get:XmsgChannelStatusCfgMysql.port)
  return port_;
}
inline void XmsgChannelStatusCfgMysql::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:XmsgChannelStatusCfgMysql.port)
}

// string db = 3;
inline void XmsgChannelStatusCfgMysql::clear_db() {
  db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgChannelStatusCfgMysql::db() const {
  // @@protoc_insertion_point(field_get:XmsgChannelStatusCfgMysql.db)
  return db_.GetNoArena();
}
inline void XmsgChannelStatusCfgMysql::set_db(const ::std::string& value) {
  
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgChannelStatusCfgMysql.db)
}
#if LANG_CXX11
inline void XmsgChannelStatusCfgMysql::set_db(::std::string&& value) {
  
  db_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgChannelStatusCfgMysql.db)
}
#endif
inline void XmsgChannelStatusCfgMysql::set_db(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgChannelStatusCfgMysql.db)
}
inline void XmsgChannelStatusCfgMysql::set_db(const char* value, size_t size) {
  
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgChannelStatusCfgMysql.db)
}
inline ::std::string* XmsgChannelStatusCfgMysql::mutable_db() {
  
  // @@protoc_insertion_point(field_mutable:XmsgChannelStatusCfgMysql.db)
  return db_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgChannelStatusCfgMysql::release_db() {
  // @@protoc_insertion_point(field_release:XmsgChannelStatusCfgMysql.db)
  
  return db_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgChannelStatusCfgMysql::set_allocated_db(::std::string* db) {
  if (db != NULL) {
    
  } else {
    
  }
  db_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db);
  // @@protoc_insertion_point(field_set_allocated:XmsgChannelStatusCfgMysql.db)
}

// string usr = 4;
inline void XmsgChannelStatusCfgMysql::clear_usr() {
  usr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgChannelStatusCfgMysql::usr() const {
  // @@protoc_insertion_point(field_get:XmsgChannelStatusCfgMysql.usr)
  return usr_.GetNoArena();
}
inline void XmsgChannelStatusCfgMysql::set_usr(const ::std::string& value) {
  
  usr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgChannelStatusCfgMysql.usr)
}
#if LANG_CXX11
inline void XmsgChannelStatusCfgMysql::set_usr(::std::string&& value) {
  
  usr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgChannelStatusCfgMysql.usr)
}
#endif
inline void XmsgChannelStatusCfgMysql::set_usr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  usr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgChannelStatusCfgMysql.usr)
}
inline void XmsgChannelStatusCfgMysql::set_usr(const char* value, size_t size) {
  
  usr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgChannelStatusCfgMysql.usr)
}
inline ::std::string* XmsgChannelStatusCfgMysql::mutable_usr() {
  
  // @@protoc_insertion_point(field_mutable:XmsgChannelStatusCfgMysql.usr)
  return usr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgChannelStatusCfgMysql::release_usr() {
  // @@protoc_insertion_point(field_release:XmsgChannelStatusCfgMysql.usr)
  
  return usr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgChannelStatusCfgMysql::set_allocated_usr(::std::string* usr) {
  if (usr != NULL) {
    
  } else {
    
  }
  usr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), usr);
  // @@protoc_insertion_point(field_set_allocated:XmsgChannelStatusCfgMysql.usr)
}

// string password = 5;
inline void XmsgChannelStatusCfgMysql::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgChannelStatusCfgMysql::password() const {
  // @@protoc_insertion_point(field_get:XmsgChannelStatusCfgMysql.password)
  return password_.GetNoArena();
}
inline void XmsgChannelStatusCfgMysql::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgChannelStatusCfgMysql.password)
}
#if LANG_CXX11
inline void XmsgChannelStatusCfgMysql::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgChannelStatusCfgMysql.password)
}
#endif
inline void XmsgChannelStatusCfgMysql::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgChannelStatusCfgMysql.password)
}
inline void XmsgChannelStatusCfgMysql::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgChannelStatusCfgMysql.password)
}
inline ::std::string* XmsgChannelStatusCfgMysql::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:XmsgChannelStatusCfgMysql.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgChannelStatusCfgMysql::release_password() {
  // @@protoc_insertion_point(field_release:XmsgChannelStatusCfgMysql.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgChannelStatusCfgMysql::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:XmsgChannelStatusCfgMysql.password)
}

// uint32 poolSize = 6;
inline void XmsgChannelStatusCfgMysql::clear_poolsize() {
  poolsize_ = 0u;
}
inline ::google::protobuf::uint32 XmsgChannelStatusCfgMysql::poolsize() const {
  // @@protoc_insertion_point(field_get:XmsgChannelStatusCfgMysql.poolSize)
  return poolsize_;
}
inline void XmsgChannelStatusCfgMysql::set_poolsize(::google::protobuf::uint32 value) {
  
  poolsize_ = value;
  // @@protoc_insertion_point(field_set:XmsgChannelStatusCfgMysql.poolSize)
}

// -------------------------------------------------------------------

// XmsgChannelStatusCfgLog

// string level = 1;
inline void XmsgChannelStatusCfgLog::clear_level() {
  level_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgChannelStatusCfgLog::level() const {
  // @@protoc_insertion_point(field_get:XmsgChannelStatusCfgLog.level)
  return level_.GetNoArena();
}
inline void XmsgChannelStatusCfgLog::set_level(const ::std::string& value) {
  
  level_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgChannelStatusCfgLog.level)
}
#if LANG_CXX11
inline void XmsgChannelStatusCfgLog::set_level(::std::string&& value) {
  
  level_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgChannelStatusCfgLog.level)
}
#endif
inline void XmsgChannelStatusCfgLog::set_level(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  level_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgChannelStatusCfgLog.level)
}
inline void XmsgChannelStatusCfgLog::set_level(const char* value, size_t size) {
  
  level_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgChannelStatusCfgLog.level)
}
inline ::std::string* XmsgChannelStatusCfgLog::mutable_level() {
  
  // @@protoc_insertion_point(field_mutable:XmsgChannelStatusCfgLog.level)
  return level_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgChannelStatusCfgLog::release_level() {
  // @@protoc_insertion_point(field_release:XmsgChannelStatusCfgLog.level)
  
  return level_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgChannelStatusCfgLog::set_allocated_level(::std::string* level) {
  if (level != NULL) {
    
  } else {
    
  }
  level_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), level);
  // @@protoc_insertion_point(field_set_allocated:XmsgChannelStatusCfgLog.level)
}

// string output = 2;
inline void XmsgChannelStatusCfgLog::clear_output() {
  output_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgChannelStatusCfgLog::output() const {
  // @@protoc_insertion_point(field_get:XmsgChannelStatusCfgLog.output)
  return output_.GetNoArena();
}
inline void XmsgChannelStatusCfgLog::set_output(const ::std::string& value) {
  
  output_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgChannelStatusCfgLog.output)
}
#if LANG_CXX11
inline void XmsgChannelStatusCfgLog::set_output(::std::string&& value) {
  
  output_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgChannelStatusCfgLog.output)
}
#endif
inline void XmsgChannelStatusCfgLog::set_output(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  output_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgChannelStatusCfgLog.output)
}
inline void XmsgChannelStatusCfgLog::set_output(const char* value, size_t size) {
  
  output_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgChannelStatusCfgLog.output)
}
inline ::std::string* XmsgChannelStatusCfgLog::mutable_output() {
  
  // @@protoc_insertion_point(field_mutable:XmsgChannelStatusCfgLog.output)
  return output_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgChannelStatusCfgLog::release_output() {
  // @@protoc_insertion_point(field_release:XmsgChannelStatusCfgLog.output)
  
  return output_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgChannelStatusCfgLog::set_allocated_output(::std::string* output) {
  if (output != NULL) {
    
  } else {
    
  }
  output_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output);
  // @@protoc_insertion_point(field_set_allocated:XmsgChannelStatusCfgLog.output)
}

// -------------------------------------------------------------------

// XmsgChannelStatusCfgXscTcpServer

// string addr = 1;
inline void XmsgChannelStatusCfgXscTcpServer::clear_addr() {
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgChannelStatusCfgXscTcpServer::addr() const {
  // @@protoc_insertion_point(field_get:XmsgChannelStatusCfgXscTcpServer.addr)
  return addr_.GetNoArena();
}
inline void XmsgChannelStatusCfgXscTcpServer::set_addr(const ::std::string& value) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgChannelStatusCfgXscTcpServer.addr)
}
#if LANG_CXX11
inline void XmsgChannelStatusCfgXscTcpServer::set_addr(::std::string&& value) {
  
  addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgChannelStatusCfgXscTcpServer.addr)
}
#endif
inline void XmsgChannelStatusCfgXscTcpServer::set_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgChannelStatusCfgXscTcpServer.addr)
}
inline void XmsgChannelStatusCfgXscTcpServer::set_addr(const char* value, size_t size) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgChannelStatusCfgXscTcpServer.addr)
}
inline ::std::string* XmsgChannelStatusCfgXscTcpServer::mutable_addr() {
  
  // @@protoc_insertion_point(field_mutable:XmsgChannelStatusCfgXscTcpServer.addr)
  return addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgChannelStatusCfgXscTcpServer::release_addr() {
  // @@protoc_insertion_point(field_release:XmsgChannelStatusCfgXscTcpServer.addr)
  
  return addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgChannelStatusCfgXscTcpServer::set_allocated_addr(::std::string* addr) {
  if (addr != NULL) {
    
  } else {
    
  }
  addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addr);
  // @@protoc_insertion_point(field_set_allocated:XmsgChannelStatusCfgXscTcpServer.addr)
}

// uint32 worker = 2;
inline void XmsgChannelStatusCfgXscTcpServer::clear_worker() {
  worker_ = 0u;
}
inline ::google::protobuf::uint32 XmsgChannelStatusCfgXscTcpServer::worker() const {
  // @@protoc_insertion_point(field_get:XmsgChannelStatusCfgXscTcpServer.worker)
  return worker_;
}
inline void XmsgChannelStatusCfgXscTcpServer::set_worker(::google::protobuf::uint32 value) {
  
  worker_ = value;
  // @@protoc_insertion_point(field_set:XmsgChannelStatusCfgXscTcpServer.worker)
}

// uint32 peerLimit = 3;
inline void XmsgChannelStatusCfgXscTcpServer::clear_peerlimit() {
  peerlimit_ = 0u;
}
inline ::google::protobuf::uint32 XmsgChannelStatusCfgXscTcpServer::peerlimit() const {
  // @@protoc_insertion_point(field_get:XmsgChannelStatusCfgXscTcpServer.peerLimit)
  return peerlimit_;
}
inline void XmsgChannelStatusCfgXscTcpServer::set_peerlimit(::google::protobuf::uint32 value) {
  
  peerlimit_ = value;
  // @@protoc_insertion_point(field_set:XmsgChannelStatusCfgXscTcpServer.peerLimit)
}

// uint32 peerMtu = 4;
inline void XmsgChannelStatusCfgXscTcpServer::clear_peermtu() {
  peermtu_ = 0u;
}
inline ::google::protobuf::uint32 XmsgChannelStatusCfgXscTcpServer::peermtu() const {
  // @@protoc_insertion_point(field_get:XmsgChannelStatusCfgXscTcpServer.peerMtu)
  return peermtu_;
}
inline void XmsgChannelStatusCfgXscTcpServer::set_peermtu(::google::protobuf::uint32 value) {
  
  peermtu_ = value;
  // @@protoc_insertion_point(field_set:XmsgChannelStatusCfgXscTcpServer.peerMtu)
}

// uint32 peerRcvBuf = 5;
inline void XmsgChannelStatusCfgXscTcpServer::clear_peerrcvbuf() {
  peerrcvbuf_ = 0u;
}
inline ::google::protobuf::uint32 XmsgChannelStatusCfgXscTcpServer::peerrcvbuf() const {
  // @@protoc_insertion_point(field_get:XmsgChannelStatusCfgXscTcpServer.peerRcvBuf)
  return peerrcvbuf_;
}
inline void XmsgChannelStatusCfgXscTcpServer::set_peerrcvbuf(::google::protobuf::uint32 value) {
  
  peerrcvbuf_ = value;
  // @@protoc_insertion_point(field_set:XmsgChannelStatusCfgXscTcpServer.peerRcvBuf)
}

// uint32 peerSndBuf = 6;
inline void XmsgChannelStatusCfgXscTcpServer::clear_peersndbuf() {
  peersndbuf_ = 0u;
}
inline ::google::protobuf::uint32 XmsgChannelStatusCfgXscTcpServer::peersndbuf() const {
  // @@protoc_insertion_point(field_get:XmsgChannelStatusCfgXscTcpServer.peerSndBuf)
  return peersndbuf_;
}
inline void XmsgChannelStatusCfgXscTcpServer::set_peersndbuf(::google::protobuf::uint32 value) {
  
  peersndbuf_ = value;
  // @@protoc_insertion_point(field_set:XmsgChannelStatusCfgXscTcpServer.peerSndBuf)
}

// uint32 lazyClose = 7;
inline void XmsgChannelStatusCfgXscTcpServer::clear_lazyclose() {
  lazyclose_ = 0u;
}
inline ::google::protobuf::uint32 XmsgChannelStatusCfgXscTcpServer::lazyclose() const {
  // @@protoc_insertion_point(field_get:XmsgChannelStatusCfgXscTcpServer.lazyClose)
  return lazyclose_;
}
inline void XmsgChannelStatusCfgXscTcpServer::set_lazyclose(::google::protobuf::uint32 value) {
  
  lazyclose_ = value;
  // @@protoc_insertion_point(field_set:XmsgChannelStatusCfgXscTcpServer.lazyClose)
}

// bool tracing = 8;
inline void XmsgChannelStatusCfgXscTcpServer::clear_tracing() {
  tracing_ = false;
}
inline bool XmsgChannelStatusCfgXscTcpServer::tracing() const {
  // @@protoc_insertion_point(field_get:XmsgChannelStatusCfgXscTcpServer.tracing)
  return tracing_;
}
inline void XmsgChannelStatusCfgXscTcpServer::set_tracing(bool value) {
  
  tracing_ = value;
  // @@protoc_insertion_point(field_set:XmsgChannelStatusCfgXscTcpServer.tracing)
}

// uint32 heartbeat = 9;
inline void XmsgChannelStatusCfgXscTcpServer::clear_heartbeat() {
  heartbeat_ = 0u;
}
inline ::google::protobuf::uint32 XmsgChannelStatusCfgXscTcpServer::heartbeat() const {
  // @@protoc_insertion_point(field_get:XmsgChannelStatusCfgXscTcpServer.heartbeat)
  return heartbeat_;
}
inline void XmsgChannelStatusCfgXscTcpServer::set_heartbeat(::google::protobuf::uint32 value) {
  
  heartbeat_ = value;
  // @@protoc_insertion_point(field_set:XmsgChannelStatusCfgXscTcpServer.heartbeat)
}

// uint32 n2hZombie = 10;
inline void XmsgChannelStatusCfgXscTcpServer::clear_n2hzombie() {
  n2hzombie_ = 0u;
}
inline ::google::protobuf::uint32 XmsgChannelStatusCfgXscTcpServer::n2hzombie() const {
  // @@protoc_insertion_point(field_get:XmsgChannelStatusCfgXscTcpServer.n2hZombie)
  return n2hzombie_;
}
inline void XmsgChannelStatusCfgXscTcpServer::set_n2hzombie(::google::protobuf::uint32 value) {
  
  n2hzombie_ = value;
  // @@protoc_insertion_point(field_set:XmsgChannelStatusCfgXscTcpServer.n2hZombie)
}

// uint32 n2hTransTimeout = 11;
inline void XmsgChannelStatusCfgXscTcpServer::clear_n2htranstimeout() {
  n2htranstimeout_ = 0u;
}
inline ::google::protobuf::uint32 XmsgChannelStatusCfgXscTcpServer::n2htranstimeout() const {
  // @@protoc_insertion_point(field_get:XmsgChannelStatusCfgXscTcpServer.n2hTransTimeout)
  return n2htranstimeout_;
}
inline void XmsgChannelStatusCfgXscTcpServer::set_n2htranstimeout(::google::protobuf::uint32 value) {
  
  n2htranstimeout_ = value;
  // @@protoc_insertion_point(field_set:XmsgChannelStatusCfgXscTcpServer.n2hTransTimeout)
}

// bool n2hTracing = 12;
inline void XmsgChannelStatusCfgXscTcpServer::clear_n2htracing() {
  n2htracing_ = false;
}
inline bool XmsgChannelStatusCfgXscTcpServer::n2htracing() const {
  // @@protoc_insertion_point(field_get:XmsgChannelStatusCfgXscTcpServer.n2hTracing)
  return n2htracing_;
}
inline void XmsgChannelStatusCfgXscTcpServer::set_n2htracing(bool value) {
  
  n2htracing_ = value;
  // @@protoc_insertion_point(field_set:XmsgChannelStatusCfgXscTcpServer.n2hTracing)
}

// uint32 h2nReConn = 13;
inline void XmsgChannelStatusCfgXscTcpServer::clear_h2nreconn() {
  h2nreconn_ = 0u;
}
inline ::google::protobuf::uint32 XmsgChannelStatusCfgXscTcpServer::h2nreconn() const {
  // @@protoc_insertion_point(field_get:XmsgChannelStatusCfgXscTcpServer.h2nReConn)
  return h2nreconn_;
}
inline void XmsgChannelStatusCfgXscTcpServer::set_h2nreconn(::google::protobuf::uint32 value) {
  
  h2nreconn_ = value;
  // @@protoc_insertion_point(field_set:XmsgChannelStatusCfgXscTcpServer.h2nReConn)
}

// uint32 h2nTransTimeout = 14;
inline void XmsgChannelStatusCfgXscTcpServer::clear_h2ntranstimeout() {
  h2ntranstimeout_ = 0u;
}
inline ::google::protobuf::uint32 XmsgChannelStatusCfgXscTcpServer::h2ntranstimeout() const {
  // @@protoc_insertion_point(field_get:XmsgChannelStatusCfgXscTcpServer.h2nTransTimeout)
  return h2ntranstimeout_;
}
inline void XmsgChannelStatusCfgXscTcpServer::set_h2ntranstimeout(::google::protobuf::uint32 value) {
  
  h2ntranstimeout_ = value;
  // @@protoc_insertion_point(field_set:XmsgChannelStatusCfgXscTcpServer.h2nTransTimeout)
}

// -------------------------------------------------------------------

// XmsgChannelStatusCfgXmsgNeH2nAddr

// string neg = 1;
inline void XmsgChannelStatusCfgXmsgNeH2nAddr::clear_neg() {
  neg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgChannelStatusCfgXmsgNeH2nAddr::neg() const {
  // @@protoc_insertion_point(field_get:XmsgChannelStatusCfgXmsgNeH2nAddr.neg)
  return neg_.GetNoArena();
}
inline void XmsgChannelStatusCfgXmsgNeH2nAddr::set_neg(const ::std::string& value) {
  
  neg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgChannelStatusCfgXmsgNeH2nAddr.neg)
}
#if LANG_CXX11
inline void XmsgChannelStatusCfgXmsgNeH2nAddr::set_neg(::std::string&& value) {
  
  neg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgChannelStatusCfgXmsgNeH2nAddr.neg)
}
#endif
inline void XmsgChannelStatusCfgXmsgNeH2nAddr::set_neg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  neg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgChannelStatusCfgXmsgNeH2nAddr.neg)
}
inline void XmsgChannelStatusCfgXmsgNeH2nAddr::set_neg(const char* value, size_t size) {
  
  neg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgChannelStatusCfgXmsgNeH2nAddr.neg)
}
inline ::std::string* XmsgChannelStatusCfgXmsgNeH2nAddr::mutable_neg() {
  
  // @@protoc_insertion_point(field_mutable:XmsgChannelStatusCfgXmsgNeH2nAddr.neg)
  return neg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgChannelStatusCfgXmsgNeH2nAddr::release_neg() {
  // @@protoc_insertion_point(field_release:XmsgChannelStatusCfgXmsgNeH2nAddr.neg)
  
  return neg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgChannelStatusCfgXmsgNeH2nAddr::set_allocated_neg(::std::string* neg) {
  if (neg != NULL) {
    
  } else {
    
  }
  neg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), neg);
  // @@protoc_insertion_point(field_set_allocated:XmsgChannelStatusCfgXmsgNeH2nAddr.neg)
}

// string addr = 2;
inline void XmsgChannelStatusCfgXmsgNeH2nAddr::clear_addr() {
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgChannelStatusCfgXmsgNeH2nAddr::addr() const {
  // @@protoc_insertion_point(field_get:XmsgChannelStatusCfgXmsgNeH2nAddr.addr)
  return addr_.GetNoArena();
}
inline void XmsgChannelStatusCfgXmsgNeH2nAddr::set_addr(const ::std::string& value) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgChannelStatusCfgXmsgNeH2nAddr.addr)
}
#if LANG_CXX11
inline void XmsgChannelStatusCfgXmsgNeH2nAddr::set_addr(::std::string&& value) {
  
  addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgChannelStatusCfgXmsgNeH2nAddr.addr)
}
#endif
inline void XmsgChannelStatusCfgXmsgNeH2nAddr::set_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgChannelStatusCfgXmsgNeH2nAddr.addr)
}
inline void XmsgChannelStatusCfgXmsgNeH2nAddr::set_addr(const char* value, size_t size) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgChannelStatusCfgXmsgNeH2nAddr.addr)
}
inline ::std::string* XmsgChannelStatusCfgXmsgNeH2nAddr::mutable_addr() {
  
  // @@protoc_insertion_point(field_mutable:XmsgChannelStatusCfgXmsgNeH2nAddr.addr)
  return addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgChannelStatusCfgXmsgNeH2nAddr::release_addr() {
  // @@protoc_insertion_point(field_release:XmsgChannelStatusCfgXmsgNeH2nAddr.addr)
  
  return addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgChannelStatusCfgXmsgNeH2nAddr::set_allocated_addr(::std::string* addr) {
  if (addr != NULL) {
    
  } else {
    
  }
  addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addr);
  // @@protoc_insertion_point(field_set_allocated:XmsgChannelStatusCfgXmsgNeH2nAddr.addr)
}

// string pwd = 3;
inline void XmsgChannelStatusCfgXmsgNeH2nAddr::clear_pwd() {
  pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgChannelStatusCfgXmsgNeH2nAddr::pwd() const {
  // @@protoc_insertion_point(field_get:XmsgChannelStatusCfgXmsgNeH2nAddr.pwd)
  return pwd_.GetNoArena();
}
inline void XmsgChannelStatusCfgXmsgNeH2nAddr::set_pwd(const ::std::string& value) {
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgChannelStatusCfgXmsgNeH2nAddr.pwd)
}
#if LANG_CXX11
inline void XmsgChannelStatusCfgXmsgNeH2nAddr::set_pwd(::std::string&& value) {
  
  pwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgChannelStatusCfgXmsgNeH2nAddr.pwd)
}
#endif
inline void XmsgChannelStatusCfgXmsgNeH2nAddr::set_pwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgChannelStatusCfgXmsgNeH2nAddr.pwd)
}
inline void XmsgChannelStatusCfgXmsgNeH2nAddr::set_pwd(const char* value, size_t size) {
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgChannelStatusCfgXmsgNeH2nAddr.pwd)
}
inline ::std::string* XmsgChannelStatusCfgXmsgNeH2nAddr::mutable_pwd() {
  
  // @@protoc_insertion_point(field_mutable:XmsgChannelStatusCfgXmsgNeH2nAddr.pwd)
  return pwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgChannelStatusCfgXmsgNeH2nAddr::release_pwd() {
  // @@protoc_insertion_point(field_release:XmsgChannelStatusCfgXmsgNeH2nAddr.pwd)
  
  return pwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgChannelStatusCfgXmsgNeH2nAddr::set_allocated_pwd(::std::string* pwd) {
  if (pwd != NULL) {
    
  } else {
    
  }
  pwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwd);
  // @@protoc_insertion_point(field_set_allocated:XmsgChannelStatusCfgXmsgNeH2nAddr.pwd)
}

// string alg = 4;
inline void XmsgChannelStatusCfgXmsgNeH2nAddr::clear_alg() {
  alg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgChannelStatusCfgXmsgNeH2nAddr::alg() const {
  // @@protoc_insertion_point(field_get:XmsgChannelStatusCfgXmsgNeH2nAddr.alg)
  return alg_.GetNoArena();
}
inline void XmsgChannelStatusCfgXmsgNeH2nAddr::set_alg(const ::std::string& value) {
  
  alg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgChannelStatusCfgXmsgNeH2nAddr.alg)
}
#if LANG_CXX11
inline void XmsgChannelStatusCfgXmsgNeH2nAddr::set_alg(::std::string&& value) {
  
  alg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgChannelStatusCfgXmsgNeH2nAddr.alg)
}
#endif
inline void XmsgChannelStatusCfgXmsgNeH2nAddr::set_alg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  alg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgChannelStatusCfgXmsgNeH2nAddr.alg)
}
inline void XmsgChannelStatusCfgXmsgNeH2nAddr::set_alg(const char* value, size_t size) {
  
  alg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgChannelStatusCfgXmsgNeH2nAddr.alg)
}
inline ::std::string* XmsgChannelStatusCfgXmsgNeH2nAddr::mutable_alg() {
  
  // @@protoc_insertion_point(field_mutable:XmsgChannelStatusCfgXmsgNeH2nAddr.alg)
  return alg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgChannelStatusCfgXmsgNeH2nAddr::release_alg() {
  // @@protoc_insertion_point(field_release:XmsgChannelStatusCfgXmsgNeH2nAddr.alg)
  
  return alg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgChannelStatusCfgXmsgNeH2nAddr::set_allocated_alg(::std::string* alg) {
  if (alg != NULL) {
    
  } else {
    
  }
  alg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alg);
  // @@protoc_insertion_point(field_set_allocated:XmsgChannelStatusCfgXmsgNeH2nAddr.alg)
}

// uint32 redundant = 5;
inline void XmsgChannelStatusCfgXmsgNeH2nAddr::clear_redundant() {
  redundant_ = 0u;
}
inline ::google::protobuf::uint32 XmsgChannelStatusCfgXmsgNeH2nAddr::redundant() const {
  // @@protoc_insertion_point(field_get:XmsgChannelStatusCfgXmsgNeH2nAddr.redundant)
  return redundant_;
}
inline void XmsgChannelStatusCfgXmsgNeH2nAddr::set_redundant(::google::protobuf::uint32 value) {
  
  redundant_ = value;
  // @@protoc_insertion_point(field_set:XmsgChannelStatusCfgXmsgNeH2nAddr.redundant)
}

// -------------------------------------------------------------------

// XmsgChannelStatusCfgXmsgNeN2hAddr

// string neg = 1;
inline void XmsgChannelStatusCfgXmsgNeN2hAddr::clear_neg() {
  neg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgChannelStatusCfgXmsgNeN2hAddr::neg() const {
  // @@protoc_insertion_point(field_get:XmsgChannelStatusCfgXmsgNeN2hAddr.neg)
  return neg_.GetNoArena();
}
inline void XmsgChannelStatusCfgXmsgNeN2hAddr::set_neg(const ::std::string& value) {
  
  neg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgChannelStatusCfgXmsgNeN2hAddr.neg)
}
#if LANG_CXX11
inline void XmsgChannelStatusCfgXmsgNeN2hAddr::set_neg(::std::string&& value) {
  
  neg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgChannelStatusCfgXmsgNeN2hAddr.neg)
}
#endif
inline void XmsgChannelStatusCfgXmsgNeN2hAddr::set_neg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  neg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgChannelStatusCfgXmsgNeN2hAddr.neg)
}
inline void XmsgChannelStatusCfgXmsgNeN2hAddr::set_neg(const char* value, size_t size) {
  
  neg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgChannelStatusCfgXmsgNeN2hAddr.neg)
}
inline ::std::string* XmsgChannelStatusCfgXmsgNeN2hAddr::mutable_neg() {
  
  // @@protoc_insertion_point(field_mutable:XmsgChannelStatusCfgXmsgNeN2hAddr.neg)
  return neg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgChannelStatusCfgXmsgNeN2hAddr::release_neg() {
  // @@protoc_insertion_point(field_release:XmsgChannelStatusCfgXmsgNeN2hAddr.neg)
  
  return neg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgChannelStatusCfgXmsgNeN2hAddr::set_allocated_neg(::std::string* neg) {
  if (neg != NULL) {
    
  } else {
    
  }
  neg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), neg);
  // @@protoc_insertion_point(field_set_allocated:XmsgChannelStatusCfgXmsgNeN2hAddr.neg)
}

// string cgt = 2;
inline void XmsgChannelStatusCfgXmsgNeN2hAddr::clear_cgt() {
  cgt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgChannelStatusCfgXmsgNeN2hAddr::cgt() const {
  // @@protoc_insertion_point(field_get:XmsgChannelStatusCfgXmsgNeN2hAddr.cgt)
  return cgt_.GetNoArena();
}
inline void XmsgChannelStatusCfgXmsgNeN2hAddr::set_cgt(const ::std::string& value) {
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgChannelStatusCfgXmsgNeN2hAddr.cgt)
}
#if LANG_CXX11
inline void XmsgChannelStatusCfgXmsgNeN2hAddr::set_cgt(::std::string&& value) {
  
  cgt_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgChannelStatusCfgXmsgNeN2hAddr.cgt)
}
#endif
inline void XmsgChannelStatusCfgXmsgNeN2hAddr::set_cgt(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgChannelStatusCfgXmsgNeN2hAddr.cgt)
}
inline void XmsgChannelStatusCfgXmsgNeN2hAddr::set_cgt(const char* value, size_t size) {
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgChannelStatusCfgXmsgNeN2hAddr.cgt)
}
inline ::std::string* XmsgChannelStatusCfgXmsgNeN2hAddr::mutable_cgt() {
  
  // @@protoc_insertion_point(field_mutable:XmsgChannelStatusCfgXmsgNeN2hAddr.cgt)
  return cgt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgChannelStatusCfgXmsgNeN2hAddr::release_cgt() {
  // @@protoc_insertion_point(field_release:XmsgChannelStatusCfgXmsgNeN2hAddr.cgt)
  
  return cgt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgChannelStatusCfgXmsgNeN2hAddr::set_allocated_cgt(::std::string* cgt) {
  if (cgt != NULL) {
    
  } else {
    
  }
  cgt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cgt);
  // @@protoc_insertion_point(field_set_allocated:XmsgChannelStatusCfgXmsgNeN2hAddr.cgt)
}

// string pwd = 3;
inline void XmsgChannelStatusCfgXmsgNeN2hAddr::clear_pwd() {
  pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgChannelStatusCfgXmsgNeN2hAddr::pwd() const {
  // @@protoc_insertion_point(field_get:XmsgChannelStatusCfgXmsgNeN2hAddr.pwd)
  return pwd_.GetNoArena();
}
inline void XmsgChannelStatusCfgXmsgNeN2hAddr::set_pwd(const ::std::string& value) {
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgChannelStatusCfgXmsgNeN2hAddr.pwd)
}
#if LANG_CXX11
inline void XmsgChannelStatusCfgXmsgNeN2hAddr::set_pwd(::std::string&& value) {
  
  pwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgChannelStatusCfgXmsgNeN2hAddr.pwd)
}
#endif
inline void XmsgChannelStatusCfgXmsgNeN2hAddr::set_pwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgChannelStatusCfgXmsgNeN2hAddr.pwd)
}
inline void XmsgChannelStatusCfgXmsgNeN2hAddr::set_pwd(const char* value, size_t size) {
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgChannelStatusCfgXmsgNeN2hAddr.pwd)
}
inline ::std::string* XmsgChannelStatusCfgXmsgNeN2hAddr::mutable_pwd() {
  
  // @@protoc_insertion_point(field_mutable:XmsgChannelStatusCfgXmsgNeN2hAddr.pwd)
  return pwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgChannelStatusCfgXmsgNeN2hAddr::release_pwd() {
  // @@protoc_insertion_point(field_release:XmsgChannelStatusCfgXmsgNeN2hAddr.pwd)
  
  return pwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgChannelStatusCfgXmsgNeN2hAddr::set_allocated_pwd(::std::string* pwd) {
  if (pwd != NULL) {
    
  } else {
    
  }
  pwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwd);
  // @@protoc_insertion_point(field_set_allocated:XmsgChannelStatusCfgXmsgNeN2hAddr.pwd)
}

// string addr = 4;
inline void XmsgChannelStatusCfgXmsgNeN2hAddr::clear_addr() {
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgChannelStatusCfgXmsgNeN2hAddr::addr() const {
  // @@protoc_insertion_point(field_get:XmsgChannelStatusCfgXmsgNeN2hAddr.addr)
  return addr_.GetNoArena();
}
inline void XmsgChannelStatusCfgXmsgNeN2hAddr::set_addr(const ::std::string& value) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgChannelStatusCfgXmsgNeN2hAddr.addr)
}
#if LANG_CXX11
inline void XmsgChannelStatusCfgXmsgNeN2hAddr::set_addr(::std::string&& value) {
  
  addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgChannelStatusCfgXmsgNeN2hAddr.addr)
}
#endif
inline void XmsgChannelStatusCfgXmsgNeN2hAddr::set_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgChannelStatusCfgXmsgNeN2hAddr.addr)
}
inline void XmsgChannelStatusCfgXmsgNeN2hAddr::set_addr(const char* value, size_t size) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgChannelStatusCfgXmsgNeN2hAddr.addr)
}
inline ::std::string* XmsgChannelStatusCfgXmsgNeN2hAddr::mutable_addr() {
  
  // @@protoc_insertion_point(field_mutable:XmsgChannelStatusCfgXmsgNeN2hAddr.addr)
  return addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgChannelStatusCfgXmsgNeN2hAddr::release_addr() {
  // @@protoc_insertion_point(field_release:XmsgChannelStatusCfgXmsgNeN2hAddr.addr)
  
  return addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgChannelStatusCfgXmsgNeN2hAddr::set_allocated_addr(::std::string* addr) {
  if (addr != NULL) {
    
  } else {
    
  }
  addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addr);
  // @@protoc_insertion_point(field_set_allocated:XmsgChannelStatusCfgXmsgNeN2hAddr.addr)
}

// -------------------------------------------------------------------

// XmsgChannelStatusCfgMisc

// string uhlr = 1;
inline void XmsgChannelStatusCfgMisc::clear_uhlr() {
  uhlr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgChannelStatusCfgMisc::uhlr() const {
  // @@protoc_insertion_point(field_get:XmsgChannelStatusCfgMisc.uhlr)
  return uhlr_.GetNoArena();
}
inline void XmsgChannelStatusCfgMisc::set_uhlr(const ::std::string& value) {
  
  uhlr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgChannelStatusCfgMisc.uhlr)
}
#if LANG_CXX11
inline void XmsgChannelStatusCfgMisc::set_uhlr(::std::string&& value) {
  
  uhlr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgChannelStatusCfgMisc.uhlr)
}
#endif
inline void XmsgChannelStatusCfgMisc::set_uhlr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uhlr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgChannelStatusCfgMisc.uhlr)
}
inline void XmsgChannelStatusCfgMisc::set_uhlr(const char* value, size_t size) {
  
  uhlr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgChannelStatusCfgMisc.uhlr)
}
inline ::std::string* XmsgChannelStatusCfgMisc::mutable_uhlr() {
  
  // @@protoc_insertion_point(field_mutable:XmsgChannelStatusCfgMisc.uhlr)
  return uhlr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgChannelStatusCfgMisc::release_uhlr() {
  // @@protoc_insertion_point(field_release:XmsgChannelStatusCfgMisc.uhlr)
  
  return uhlr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgChannelStatusCfgMisc::set_allocated_uhlr(::std::string* uhlr) {
  if (uhlr != NULL) {
    
  } else {
    
  }
  uhlr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uhlr);
  // @@protoc_insertion_point(field_set_allocated:XmsgChannelStatusCfgMisc.uhlr)
}

// string ghlr = 2;
inline void XmsgChannelStatusCfgMisc::clear_ghlr() {
  ghlr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgChannelStatusCfgMisc::ghlr() const {
  // @@protoc_insertion_point(field_get:XmsgChannelStatusCfgMisc.ghlr)
  return ghlr_.GetNoArena();
}
inline void XmsgChannelStatusCfgMisc::set_ghlr(const ::std::string& value) {
  
  ghlr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgChannelStatusCfgMisc.ghlr)
}
#if LANG_CXX11
inline void XmsgChannelStatusCfgMisc::set_ghlr(::std::string&& value) {
  
  ghlr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgChannelStatusCfgMisc.ghlr)
}
#endif
inline void XmsgChannelStatusCfgMisc::set_ghlr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ghlr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgChannelStatusCfgMisc.ghlr)
}
inline void XmsgChannelStatusCfgMisc::set_ghlr(const char* value, size_t size) {
  
  ghlr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgChannelStatusCfgMisc.ghlr)
}
inline ::std::string* XmsgChannelStatusCfgMisc::mutable_ghlr() {
  
  // @@protoc_insertion_point(field_mutable:XmsgChannelStatusCfgMisc.ghlr)
  return ghlr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgChannelStatusCfgMisc::release_ghlr() {
  // @@protoc_insertion_point(field_release:XmsgChannelStatusCfgMisc.ghlr)
  
  return ghlr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgChannelStatusCfgMisc::set_allocated_ghlr(::std::string* ghlr) {
  if (ghlr != NULL) {
    
  } else {
    
  }
  ghlr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ghlr);
  // @@protoc_insertion_point(field_set_allocated:XmsgChannelStatusCfgMisc.ghlr)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cfg_2dx_2dmsg_2dchannel_2dstatus_2eproto__INCLUDED
